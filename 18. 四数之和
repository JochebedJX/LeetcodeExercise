//方法与三数之和类似，多了一层循环
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        set<vector<int>> a;
        vector<vector<int>> res;//用于保存返回值
        sort(nums.begin(),nums.end());//先排序
        if(nums.empty() || nums.front()>0 || nums.back()<0)
            return {};//排除
        for(int j=0;j<nums.size();j++){
            for(int i=j+1;i<nums.size();i++){
                int fix=nums[i];
                //if(i<nums.size()-1&&nums[j]+fix+nums[i+1]>target)   break;//后面的只会更大，所以不需要继续进行操作
                //if(nums[j]!=fix&&i>0 && fix==nums[i-1])    continue;
                //对撞指针
                int l=i+1,r=nums.size()-1;
                while(l<r){
                    if(nums[j]+nums[l]+nums[r]==target-fix){
                        if(l==i+1 || r==nums.size()-1){
                            a.insert(vector<int>{nums[j],nums[i],nums[l],nums[r]});
                            l++;r--;
                        }
                        else if(nums[l]==nums[l-1])//排除相同的情况
                            l++;
                        else if(nums[r]==nums[r+1])
                            r--;
                        else{
                            a.insert(vector<int>{nums[j],nums[i],nums[l],nums[r]});
                            l++;r--;
                        }   
                    }
                    else if(nums[j]+nums[l]+nums[r]<target-fix)
                        l++;
                    else
                        r--;
                }
            }
        }
        for(auto c:a)
        {
            res.push_back(c);
        }
        return res;
    }
};
