//给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。
//如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
//您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//方法一：利用hashmap
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode(-1), *cur = dummy;
        int carry = 0;
        while (l1 || l2) {
            int val1 = l1 ? l1->val : 0;
            int val2 = l2 ? l2->val : 0;
            int sum = val1 + val2 + carry;
            carry = sum / 10;
            cur->next = new ListNode(sum % 10);
            cur = cur->next;
            if (l1) l1 = l1->next;
            if (l2) l2 = l2->next;
        }
        if (carry) cur->next = new ListNode(1);
        return dummy->next;
    }
};
//方法二：利用数组
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* list=new ListNode(-1);
        vector<int> vec;
        int flag=0;
        while(l1&&l2)
        {
            int ret=flag+l1->val+l2->val;
            if(ret>9)
            {
                vec.push_back(ret-10);
                flag=1;
            }
            else
            {
                vec.push_back(ret);
                flag=0;
            }
            l1=l1->next;
            l2=l2->next;

        }
        if(l1==nullptr)
        {
            while(l2)
            {
                int ret=flag+l2->val;
                if(ret>9)
                {
                    vec.push_back(ret-10);
                    flag=1;
                }
                else
                {
                    vec.push_back(ret);
                    flag=0;
                }
                l2=l2->next;
            }
            if(flag==1)
            {
                vec.push_back(1);
            }
        }
        else if(l2==nullptr)
        {
            while(l1)
            {
                int ret=flag+l1->val;
                if(ret>9)
                {
                    vec.push_back(ret-10);
                    flag=1;
                }
                else
                {
                    vec.push_back(ret);
                    flag=0;
                }
                l1=l1->next;
            }
            if(flag==1)
            {
                vec.push_back(1);
            }
        }
        ListNode *cur=list;
        for(int i=0;i<vec.size();i++)
        {
            ListNode *newlist=new ListNode(vec[i]);
            newlist->next=list->next;
            list->next=newlist;
            list=newlist;
        }
        return cur->next;
    }
};

