//解法一：
//建立一个哈希表，然后一一判断，若前面的罗马数值比后面的罗马数值小，则将结果加上两者的正差值，若前面的罗马数值比后面的罗马数值大，则直接加上该罗马的对应数值。

class Solution {
public:
    int romanToInt(string s) {
        int result=0;//存放结果
        map<char,int> luomab;//建立罗马表
        //插入对应关系
        luomab.insert(map<char,int>::value_type('I',1));
        luomab.insert(map<char,int>::value_type('V',5));
        luomab.insert(map<char,int>::value_type('X',10));
        luomab.insert(map<char,int>::value_type('L',50));
        luomab.insert(map<char,int>::value_type('C',100));
        luomab.insert(map<char,int>::value_type('D',500));
        luomab.insert(map<char,int>::value_type('M',1000));
        for(int i=0;i<s.length();i++)
        {
            if(luomab[s[i]]>=luomab[s[i+1]])
                result+=luomab[s[i]];
            else
            {
                result+=(luomab[s[i+1]]-luomab[s[i]]);
                i++;
            }
        }
        return result;
    }
};

//解法2：
//用switch-case语句覆盖所有可能情况

class Solution {
public:
    int romanToInt(string s) {
        int result=0;
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            switch(s[i])
            {
                case'I':
                    if(i<n-1&&s[i+1]=='V')
                    {
                        result+=4;
                        i++;
                    }
                    else if(i<n-1&&s[i+1]=='X')
                    {
                        result+=9;
                        i++;
                    }
                    else result++;
                    break;
                case'V':
                    result+=5;
                    break;
                case'X':
                    if(i<n-1&&s[i+1]=='L')
                    {
                        result+=40;
                        i++;
                    }
                    else if(i<n-1&&s[i+1]=='C')
                    {
                        result+=90;
                        i++;
                    }
                    else result+=10;
                    break;
                case'L':
                    result+=50;
                    break;
                case'C':
                    if(i<n-1&&s[i+1]=='D')
                    {
                        result+=400;
                        i++;
                    }
                    else if(i<n-1&&s[i+1]=='M')
                    {
                        result+=900;
                        i++;
                    }
                    else result+=100;
                    break;
                case'D':
                    result+=500;
                    break;
                case'M':
                    result+=1000;
            }
        }
        return result;
    }
};
//解法三：
class Solution {
public:
    int romanToInt(string s) {
        unordered_map<string, int> m = {{"I", 1}, {"IV", 3}, {"IX", 8}, {"V", 5}, {"X", 10}, {"XL", 30}, {"XC", 80}, {"L", 50}, {"C", 100}, {"CD", 300}, {"CM", 800}, {"D", 500}, {"M", 1000}};
        int r = m[s.substr(0, 1)];
        for(int i=1; i<s.size(); ++i){
            string two = s.substr(i-1, 2);
            string one = s.substr(i, 1);
            r += m[two] ? m[two] : m[one];
        }
        return r;
    }
};
